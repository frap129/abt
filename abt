#!/bin/bash
# Copyright (C) 2016 Joe Maples <joe@frap129.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
#   You may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Define color values
red=$(tput setaf 1) # red
grn=$(tput setaf 2) # green
blu=$(tput setaf 4) # blue
cya=$(tput setaf 6) # cyan
txtbld=$(tput bold) # bold
bldred=${txtbld}$(tput setaf 1) # red
bldgrn=${txtbld}$(tput setaf 2) # green
bldblu=${txtbld}$(tput setaf 4) # blue
bldcya=${txtbld}$(tput setaf 6) # cyan
txtrst=$(tput sgr0) # reset

# Define help command
help () {
echo "Usage: abt [OPTIONS]"
echo ""
echo "OPTIONS: -bTARGET    Build target. ex. -botapackage. Defaults to otapackage"
echo "         -c[TARGET]  Clean before build. Default target is clean, but can be set. ex. -cclobber "
echo "         -dTARGET    Device to lunch. ex. aosp_shamu-eng. Set default in device.abt in the chroot"
echo "         -jJOBS      Number of threads to use. Auto calculates if not set"
echo "         -s          Sync sources before starting build. Defaults to false"
echo "         -p          Run commands specified in prebuild.abt before build"
echo "         -a          Run commands specified in postbuild.abt after build"
echo "         -h          Show this menu"
exit 1;
}

# Make sure local variables aren't set
unset buildflag
unset cleanflag
unset cleantrue
unset deviceflag
unset jobsflag
unset prebuildflag
unset postbuildflag
unset syncflag

while getopts 'b:c:d:j:pash' flag; do
  case "${flag}" in
    b) buildflag="${OPTARG}" ;;
    c) cleanflag="${OPTARG}" && cleantrue="true" ;;
    d) deviceflag="${OPTARG}" ;;
    j) jobsflag="${OPTARG}" ;;
    p) prebuildflag="true" ;;
    a) postbuildflag="true" ;;
    s) syncflag="true" ;;
    h) help ;;
    *) error "${bldred}Unknown option ${flag}. Run $O -h for help${txtrst}" ;;
  esac
done

if [ -d .abt ]; then
  mkdir .abt
fi;

# Set build target
if [ -z "$buildflag" ]; then
  if [ ! -e .abt/build.abt ]; then
    buildcmd="otapackage"
  else
    buildcmd="$(cat .abt/build.abt)"
  fi;
else
  buildcmd="$buildflag"
fi;

# Set device target
if [ -z "$deviceflag" ]; then
  if [ ! -e .abt/device.abt ]; then
    echo "${bldred}ERROR:${txtrst}${red} No device specified${txtrst}"
    echo ""
    help
  else
    devicename="$(cat .abt/device.abt)"
  fi;
else
  devicename="$deviceflag"
fi;

# Set make jobs
if [ -z "$jobsflag" ]; then
  jobs="$(grep -c ^processor /proc/cpuinfo)"
  makejobs="-j$jobs"
else
  makejobs="-j$jobsflag"
fi;

# Build
if [ "$syncflag" == "true" ]; then
  echo "${cya}Syncing sources...${txtrst}"
  repo sync $makejobs -f --force-sync -c;
fi;
echo "${cya}Lunching device...${txtrst}"
. build/envsetup.sh &> /dev/null && lunch $devicename &> /dev/null
if [ -n "$cleantrue" ]; then
  echo "${cya}Cleaning previous build...${txtrst}"
  if [ -n "$cleanflag" ]; then
    make $cleancmd &> /dev/null
  else
    make clean &> /dev/null
  fi;
fi;
if [ "$prebuildflag" == "true" ]; then
  before-build="$(cat .abt/prebuild.abt)"
  echo "${cya}Running prebuild commands...${txtrst}"
  before-build &> /dev/null
fi;
echo "${cya}Starting build...${txtrst}"
if ! time make $buildcmd $makejobs; then
  echo "${bldred}Build failed!${txtrst}"
else
  if [ "$postbuildflag" == "true" ]; then
    after-build="$(cat .abt/postbuild.abt)"
    echo "${cya}Running postbuild commands...${txtrst}"
    after-build &> /dev/null
  fi;
 echo "${grn}Wooooohoooo! Build completed!${txtrst}"
fi;
